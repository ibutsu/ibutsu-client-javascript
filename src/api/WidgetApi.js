/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WidgetTypeList from '../model/WidgetTypeList';

/**
* Widget service.
* @module api/WidgetApi
* @version 0.1
*/
export default class WidgetApi {

    /**
    * Constructs a new WidgetApi. 
    * @alias module:api/WidgetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Generate data for a dashboard widget
     * @param {String} id The widget identifier
     * @param {Object} opts Optional parameters
     * @param {Object} opts.params The parameters for the widget
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getWidgetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWidget");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'params': opts['params']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/widget/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate data for a dashboard widget
     * @param {String} id The widget identifier
     * @param {Object} opts Optional parameters
     * @param {Object} opts.params The parameters for the widget
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getWidget(id, opts) {
      return this.getWidgetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of widget types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WidgetTypeList} and HTTP response
     */
    getWidgetTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WidgetTypeList;
      return this.apiClient.callApi(
        '/widget/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of widget types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WidgetTypeList}
     */
    getWidgetTypes() {
      return this.getWidgetTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
