/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Run from '../model/Run';
import RunList from '../model/RunList';

/**
* Run service.
* @module api/RunApi
* @version 1.0.0
*/
export default class RunApi {

    /**
    * Constructs a new RunApi. 
    * @alias module:api/RunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a run
     * @param {Object} opts Optional parameters
     * @param {module:model/Run} opts.run Run item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Run} and HTTP response
     */
    addRunWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['run'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a run
     * @param {Object} opts Optional parameters
     * @param {module:model/Run} opts.run Run item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Run}
     */
    addRun(opts) {
      return this.addRunWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single run by ID
     * @param {String} id ID of test run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Run} and HTTP response
     */
    getRunWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/run/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single run by ID
     * @param {String} id ID of test run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Run}
     */
    getRun(id) {
      return this.getRunWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of the test runs
     * The `filter` parameter takes a list of filters to apply in the form of:       {name}{operator}{value}   where:    - `name` is any valid column in the database   - `operator` is one of `=`, `!`, `＞`, `＜`, `)`, `(`, `~`, `*`   - `value` is what you want to filter by  Operators are simple correspondents to MongoDB's query selectors:    - `=` becomes `$eq`   - `!` becomes `$ne`   - `＞` becomes `$gt`   - `＜` becomes `$lt`   - `)` becomes `$gte`   - `(` becomes `$lte`   - `~` becomes `$regex`   - `*` becomes `$in`   - `@` becomes `$exists`  Notes:  - For the `$exists` operator, \"true\", \"t\", \"yes\", \"y\" and `1` will all be considered true,   all other values are considered false.  Example queries:       /result?filter=metadata.run=63fe5     /result?filter=test_id~neg     /result?filter=result!passed 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filter Fields to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunList} and HTTP response
     */
    getRunListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunList;
      return this.apiClient.callApi(
        '/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of the test runs
     * The `filter` parameter takes a list of filters to apply in the form of:       {name}{operator}{value}   where:    - `name` is any valid column in the database   - `operator` is one of `=`, `!`, `＞`, `＜`, `)`, `(`, `~`, `*`   - `value` is what you want to filter by  Operators are simple correspondents to MongoDB's query selectors:    - `=` becomes `$eq`   - `!` becomes `$ne`   - `＞` becomes `$gt`   - `＜` becomes `$lt`   - `)` becomes `$gte`   - `(` becomes `$lte`   - `~` becomes `$regex`   - `*` becomes `$in`   - `@` becomes `$exists`  Notes:  - For the `$exists` operator, \"true\", \"t\", \"yes\", \"y\" and `1` will all be considered true,   all other values are considered false.  Example queries:       /result?filter=metadata.run=63fe5     /result?filter=test_id~neg     /result?filter=result!passed 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filter Fields to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunList}
     */
    getRunList(opts) {
      return this.getRunListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a single run
     * @param {String} id ID of the test run
     * @param {module:model/Run} run The updated test run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Run} and HTTP response
     */
    updateRunWithHttpInfo(id, run) {
      let postBody = run;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRun");
      }
      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling updateRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Run;
      return this.apiClient.callApi(
        '/run/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a single run
     * @param {String} id ID of the test run
     * @param {module:model/Run} run The updated test run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Run}
     */
    updateRun(id, run) {
      return this.updateRunWithHttpInfo(id, run)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
