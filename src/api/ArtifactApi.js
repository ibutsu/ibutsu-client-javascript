/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Artifact from '../model/Artifact';
import ArtifactList from '../model/ArtifactList';

/**
* Artifact service.
* @module api/ArtifactApi
* @version 0.1
*/
export default class ArtifactApi {

    /**
    * Constructs a new ArtifactApi. 
    * @alias module:api/ArtifactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete an artifact
     * @param {String} id ID of artifact to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteArtifactWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteArtifact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifact/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an artifact
     * @param {String} id ID of artifact to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteArtifact(id) {
      return this.deleteArtifactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an artifact
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadArtifactWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadArtifact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'image/jpeg', 'image/png', 'image/gif', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/artifact/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download an artifact
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadArtifact(id) {
      return this.downloadArtifactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single artifact
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artifact} and HTTP response
     */
    getArtifactWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArtifact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single artifact
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artifact}
     */
    getArtifact(id) {
      return this.getArtifactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a (filtered) list of artifacts
     * @param {Object} opts Optional parameters
     * @param {String} opts.resultId The result ID to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtifactList} and HTTP response
     */
    getArtifactListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'resultId': opts['resultId'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactList;
      return this.apiClient.callApi(
        '/artifact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a (filtered) list of artifacts
     * @param {Object} opts Optional parameters
     * @param {String} opts.resultId The result ID to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtifactList}
     */
    getArtifactList(opts) {
      return this.getArtifactListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Uploads a test run artifact
     * @param {String} resultId ID of result to attach artifact to
     * @param {String} filename ID of pet to update
     * @param {File} file file to upload
     * @param {Object} opts Optional parameters
     * @param {Object} opts.additionalMetadata Additional data to pass to server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artifact} and HTTP response
     */
    uploadArtifactWithHttpInfo(resultId, filename, file, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling uploadArtifact");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling uploadArtifact");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'resultId': resultId,
        'filename': filename,
        'file': file,
        'additionalMetadata': opts['additionalMetadata']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Uploads a test run artifact
     * @param {String} resultId ID of result to attach artifact to
     * @param {String} filename ID of pet to update
     * @param {File} file file to upload
     * @param {Object} opts Optional parameters
     * @param {Object} opts.additionalMetadata Additional data to pass to server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artifact}
     */
    uploadArtifact(resultId, filename, file, opts) {
      return this.uploadArtifactWithHttpInfo(resultId, filename, file, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stream an artifact directly to the client/browser
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    viewArtifactWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling viewArtifact");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'image/jpeg', 'image/png', 'image/gif', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/artifact/{id}/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stream an artifact directly to the client/browser
     * @param {String} id ID of artifact to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    viewArtifact(id) {
      return this.viewArtifactWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
