/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelImport from '../model/ModelImport';

/**
* Import service.
* @module api/ImportApi
* @version 1.0.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Import a file into Ibutsu. This can be either a JUnit XML file, or an Ibutsu archive
     * @param {File} importFile The file to import
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    addImportWithHttpInfo(importFile) {
      let postBody = null;
      // verify the required parameter 'importFile' is set
      if (importFile === undefined || importFile === null) {
        throw new Error("Missing the required parameter 'importFile' when calling addImport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'importFile': importFile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import a file into Ibutsu. This can be either a JUnit XML file, or an Ibutsu archive
     * @param {File} importFile The file to import
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    addImport(importFile) {
      return this.addImportWithHttpInfo(importFile)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of an import
     * @param {String} id The ID of the import
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    getImportWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/import/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the status of an import
     * @param {String} id The ID of the import
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    getImport(id) {
      return this.getImportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
