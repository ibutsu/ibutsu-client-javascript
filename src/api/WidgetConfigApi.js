/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WidgetConfig from '../model/WidgetConfig';
import WidgetConfigList from '../model/WidgetConfigList';

/**
* WidgetConfig service.
* @module api/WidgetConfigApi
* @version 1.0.0
*/
export default class WidgetConfigApi {

    /**
    * Constructs a new WidgetConfigApi. 
    * @alias module:api/WidgetConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a widget configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/WidgetConfig} opts.widgetConfig Widget configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WidgetConfig} and HTTP response
     */
    addWidgetConfigWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['widgetConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WidgetConfig;
      return this.apiClient.callApi(
        '/widget-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a widget configuration
     * @param {Object} opts Optional parameters
     * @param {module:model/WidgetConfig} opts.widgetConfig Widget configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WidgetConfig}
     */
    addWidgetConfig(opts) {
      return this.addWidgetConfigWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a widget configuration
     * @param {String} id ID of widget configuration to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWidgetConfigWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWidgetConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/widget-config/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a widget configuration
     * @param {String} id ID of widget configuration to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWidgetConfig(id) {
      return this.deleteWidgetConfigWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single widget configuration
     * @param {String} id ID of widget config to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WidgetConfig} and HTTP response
     */
    getWidgetConfigWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWidgetConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WidgetConfig;
      return this.apiClient.callApi(
        '/widget-config/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single widget configuration
     * @param {String} id ID of widget config to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WidgetConfig}
     */
    getWidgetConfig(id) {
      return this.getWidgetConfigWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of widget configurations
     * A list of widget configurations
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filter Fields to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WidgetConfigList} and HTTP response
     */
    getWidgetConfigListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WidgetConfigList;
      return this.apiClient.callApi(
        '/widget-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of widget configurations
     * A list of widget configurations
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.filter Fields to filter by
     * @param {Number} opts.page Set the page of items to return, defaults to 1
     * @param {Number} opts.pageSize Set the number of items per page, defaults to 25
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WidgetConfigList}
     */
    getWidgetConfigList(opts) {
      return this.getWidgetConfigListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a single widget configuration
     * @param {String} id ID of widget configuration to update
     * @param {Object} opts Optional parameters
     * @param {module:model/WidgetConfig} opts.widgetConfig Widget configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WidgetConfig} and HTTP response
     */
    updateWidgetConfigWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['widgetConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWidgetConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WidgetConfig;
      return this.apiClient.callApi(
        '/widget-config/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a single widget configuration
     * @param {String} id ID of widget configuration to update
     * @param {Object} opts Optional parameters
     * @param {module:model/WidgetConfig} opts.widgetConfig Widget configuration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WidgetConfig}
     */
    updateWidgetConfig(id, opts) {
      return this.updateWidgetConfigWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
