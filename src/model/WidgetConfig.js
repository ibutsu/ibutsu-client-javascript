/**
 * Ibutsu API
 * A system to store and query test results
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WidgetConfig model module.
 * @module model/WidgetConfig
 * @version 1.0.0
 */
class WidgetConfig {
    /**
     * Constructs a new <code>WidgetConfig</code>.
     * @alias module:model/WidgetConfig
     */
    constructor() { 
        
        WidgetConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WidgetConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WidgetConfig} obj Optional instance to populate.
     * @return {module:model/WidgetConfig} The populated <code>WidgetConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WidgetConfig();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('widget')) {
                obj['widget'] = ApiClient.convertToType(data['widget'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The internal ID of the WidgetConfig
 * @member {String} id
 */
WidgetConfig.prototype['id'] = undefined;

/**
 * The type of widget, one of either \"widget\" or \"view\"
 * @member {String} type
 */
WidgetConfig.prototype['type'] = undefined;

/**
 * The widget to render, from the list at /widget/types
 * @member {String} widget
 */
WidgetConfig.prototype['widget'] = undefined;

/**
 * The project for which the widget is designed
 * @member {String} project
 */
WidgetConfig.prototype['project'] = undefined;

/**
 * The weighting for the widget, lower weight means it will display first
 * @member {Number} weight
 */
WidgetConfig.prototype['weight'] = undefined;

/**
 * A dictionary of parameters to send to the widget
 * @member {Object} params
 */
WidgetConfig.prototype['params'] = undefined;

/**
 * The title shown on the widget or page
 * @member {String} title
 */
WidgetConfig.prototype['title'] = undefined;






export default WidgetConfig;

